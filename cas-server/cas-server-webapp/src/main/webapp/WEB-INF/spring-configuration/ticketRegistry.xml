<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Apereo under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Apereo licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
              http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
              http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
              http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
              http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <description>
        Configuration for the default TicketRegistry which stores the tickets in-memory and cleans them out as specified
        intervals.
    </description>

    <!-- Ticket Registry -->
    <!-- 0  <bean id="ticketRegistry" class="org.jasig.cas.ticket.registry.DefaultTicketRegistry"/> -->

    <!--Quartz -->
    <!-- TICKET REGISTRY CLEANER -->
                              <!--  说明：因为redis本身提供value的失效策略 ，因此原来的 ticket清除策略可以不用 -->
    
<!--  1   <bean id="ticketRegistryCleaner" class="org.jasig.cas.ticket.registry.support.DefaultTicketRegistryCleaner"
          c:centralAuthenticationService-ref="centralAuthenticationService"
          c:ticketRegistry-ref="ticketRegistry"/> -->

<!--  2   <bean id="jobDetailTicketRegistryCleaner"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
          p:targetObject-ref="ticketRegistryCleaner"
          p:targetMethod="clean"/> -->

<!--  3   <bean id="triggerJobDetailTicketRegistryCleaner"
          class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"
          p:jobDetail-ref="jobDetailTicketRegistryCleaner"
          p:startDelay="20000"
          p:repeatInterval="5000000"/> -->
          
          
          
          
    	 <!-- CAS redis集群配置开始 -->
    	 
	 <bean id="ticketRegistry" class="org.jasig.cas.ticket.registry.RedisTicketRegistry">
        <constructor-arg index="0" ref="redisTemplate" />
        <constructor-arg index="1" value="43200" />
        <constructor-arg index="2" value="10" />
    </bean>
    
    <bean id="clusterRedisNodes1"   class="org.springframework.data.redis.connection.RedisNode"> 
            <constructor-arg value="192.168.8.143" />
           <constructor-arg value="10020" type="int" />
     </bean>
    <bean id="clusterRedisNodes2"   class="org.springframework.data.redis.connection.RedisNode"> 
            <constructor-arg value="192.168.8.143" />
           <constructor-arg value="10021" type="int" />
     </bean>
    <bean id="clusterRedisNodes3"   class="org.springframework.data.redis.connection.RedisNode"> 
            <constructor-arg value="192.168.8.143" />
           <constructor-arg value="10022" type="int" />
     </bean>
     
    <bean id="clusterRedisNodes4"   class="org.springframework.data.redis.connection.RedisNode"> 
            <constructor-arg value="192.168.8.143" />
           <constructor-arg value="10023" type="int" />
     </bean>
     
     <bean id="clusterRedisNodes5"   class="org.springframework.data.redis.connection.RedisNode"> 
            <constructor-arg value="192.168.8.143" />
           <constructor-arg value="10024" type="int" />
     </bean>
     
     <bean id="clusterRedisNodes6"   class="org.springframework.data.redis.connection.RedisNode"> 
            <constructor-arg value="192.168.8.143" />
           <constructor-arg value="10025" type="int" />
     </bean>
     
     
     
     <bean id="redisClusterConfiguration"   class="org.springframework.data.redis.connection.RedisClusterConfiguration">
       <property name="clusterNodes">
            <set>
                 <ref bean="clusterRedisNodes1"/>
                 <ref bean="clusterRedisNodes2"/>
                 <ref bean="clusterRedisNodes3"/>
                 <ref bean="clusterRedisNodes4"/>
                 <ref bean="clusterRedisNodes5"/>
                 <ref bean="clusterRedisNodes6"/>
            </set>
       </property>
       <!-- <property name="clusterTimeout"  value="10000" /> -->
       <property name="maxRedirects"   value="8" />
    </bean>
    
	<!--jedis pool对象池配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="1000" />
		<property name="maxIdle" value="500" />
		<property name="maxWaitMillis" value="1000" />
		<property name="testOnBorrow" value="true"/>
	</bean>
	
	<bean id="jedisConnFactory"   class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:use-pool="true">
        <constructor-arg ref="redisClusterConfiguration" />
        <constructor-arg ref="jedisPoolConfig" />
  	</bean>

 	<bean id="redisTemplate"   class="org.springframework.data.redis.core.RedisTemplate"  p:connection-factory-ref="jedisConnFactory" />
    
    <!-- CAS redis集群配置结束 -->
          
          
          
          
          
</beans>
